-- Full credits to Kiriot22 https://v3rmillion.net/showthread.php?tid=1088719

-- Settings --
local ESP = {
	Enabled = false,
	Boxes = true,
	BoxShift = CFrame.new(0, -1.5, 0),
	BoxSize = Vector3.new(4, 6, 0),
	Color = Color3.fromRGB(255, 170, 0),
	FaceCamera = false,
	Names = true,
	TeamColor = true,
	Thickness = 2,
	AttachShift = 1,
	TeamMates = true,
	Players = true,

	Objects = setmetatable({}, { __mode = "kv" }),
	Overrides = {}
}

-- Declarations --
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local RunService = game:GetService("RunService")

local V3new = Vector3.new
local WorldToViewportPoint = cam.WorldToViewportPoint

-- Functions --
local function Draw(obj, props)
	local newObj
	local success, err = pcall(function()
		newObj = Drawing.new(obj)
	end)
	if not success then
		warn("Failed to create Drawing object:", err)
		return nil
	end
	
	props = props or {}
	for i, v in pairs(props) do
		newObj[i] = v
	end
	return newObj
end

function ESP:GetTeam(p)
	local override = self.Overrides.GetTeam
	if override then
		return override(p)
	end
	return p and p.Team
end

function ESP:IsTeamMate(p)
	local override = self.Overrides.IsTeamMate
	if override then
		return override(p)
	end
	return self:GetTeam(p) == self:GetTeam(plr)
end

function ESP:GetColor(obj)
	local override = self.Overrides.GetColor
	if override then
		return override(obj)
	end
	local p = self:GetPlrFromChar(obj)
	return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
end

function ESP:GetPlrFromChar(char)
	local override = self.Overrides.GetPlrFromChar
	if override then
		return override(char)
	end
	return plrs:GetPlayerFromCharacter(char)
end

function ESP:Toggle(enabled)
	self.Enabled = enabled
	if not enabled then
		for i, v in pairs(self.Objects) do
			if v.Type == "Box" then
				if v.Temporary then
					v:Remove()
				else
					for _, component in pairs(v.Components) do
						component.Visible = false
					end
				end
			end
		end
	end
end

function ESP:GetBox(obj)
	return self.Objects[obj]
end

function ESP:AddObjectListener(parent, options)
	local function NewListener(child)
		if (not options.Type or child:IsA(options.Type)) and 
		   (not options.Name or child.Name == options.Name) and 
		   (not options.Validator or options.Validator(child)) then
			local box = ESP:Add(child, {
				PrimaryPart = type(options.PrimaryPart) == "string" and child:WaitForChild(options.PrimaryPart) or type(options.PrimaryPart) == "function" and options.PrimaryPart(child),
				Color = type(options.Color) == "function" and options.Color(child) or options.Color,
				ColorDynamic = options.ColorDynamic,
				Name = type(options.CustomName) == "function" and options.CustomName(child) or options.CustomName,
				IsEnabled = options.IsEnabled,
				RenderInNil = options.RenderInNil
			})
			if options.OnAdded then
				task.spawn(options.OnAdded, box)
			end
		end
	end

	local function SetupListeners()
		if options.Recursive then
			parent.DescendantAdded:Connect(NewListener)
			for _, desc in ipairs(parent:GetDescendants()) do
				task.spawn(NewListener, desc)
			end
		else
			parent.ChildAdded:Connect(NewListener)
			for _, child in ipairs(parent:GetChildren()) do
				task.spawn(NewListener, child)
			end
		end
	end

	SetupListeners()
end

local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
	ESP.Objects[self.Object] = nil
	for _, component in pairs(self.Components) do
		component.Visible = false
		component:Remove()
		self.Components[_] = nil
	end
end

function boxBase:Update()
	if not self.PrimaryPart then
		return self:Remove()
	end

	local color
	if ESP.Highlighted == self.Object then
		color = ESP.HighlightColor
	else
		color = self.Color or (self.ColorDynamic and self:ColorDynamic()) or ESP:GetColor(self.Object) or ESP.Color
	end

	local allow = true
	if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then
		allow = false
	end
	if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then
		allow = false
	end
	if self.Player and not ESP.Players then
		allow = false
	end
	if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and not self:IsEnabled()) then
		allow = false
	end
	if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
		allow = false
	end

	if not allow then
		for _, component in pairs(self.Components) do
			component.Visible = false
		end
		return
	end

	-- Calculations --
	local cf = self.PrimaryPart.CFrame
	if ESP.FaceCamera then
		cf = CFrame.new(cf.p, cam.CFrame.p)
	end
	local size = self.Size
	local locs = {
		TopLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, size.Y / 2, 0),
		TopRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, size.Y / 2, 0),
		BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, -size.Y / 2, 0),
		BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, -size.Y / 2, 0),
		TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y / 2, 0),
		Torso = cf * ESP.BoxShift
	}

	-- Box --
	if ESP.Boxes and self.Components.Quad then
		local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.p)
		local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.p)
		local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.p)
		local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.p)

		if Vis1 or Vis2 or Vis3 or Vis4 then
			self.Components.Quad.Visible = true
			self.Components.Quad.PointA = Vector2.new(TopRight.X, TopRight.Y)
			self.Components.Quad.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
			self.Components.Quad.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
			self.Components.Quad.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
			self.Components.Quad.Color = color
		else
			self.Components.Quad.Visible = false
		end
	else
		self.Components.Quad.Visible = false
	end

	-- Name and Distance --
	if ESP.Names then
		local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.p)
		if Vis5 then
			self.Components.Name.Visible = true
			self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
			self.Components.Name.Text = self.Name
			self.Components.Name.Color = color

			self.Components.Distance.Visible = true
			self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + 14)
			self.Components.Distance.Text = math.floor((cam.CFrame.p - cf.p).magnitude) .. "m away"
			self.Components.Distance.Color = color
		else
			self.Components.Name.Visible = false
			self.Components.Distance.Visible = false
		end
	else
		self.Components.Name.Visible = false
		self.Components.Distance.Visible = false
	end

	-- Tracer --
	if ESP.Tracers then
		local TorsoPos, Vis6 = WorldToViewportPoint(cam, locs.Torso.p)
		if Vis6 then
			self.Components.Tracer.Visible = true
			self.Components.Tracer.From = Vector2.new(cam.ViewportSize.X / 2, cam.ViewportSize.Y / ESP.AttachShift)
			self.Components.Tracer.To = Vector2.new(TorsoPos.X, TorsoPos.Y)
			self.Components.Tracer.Color = color
		else
			self.Components.Tracer.Visible = false
		end
	else
		self.Components.Tracer.Visible = false
	end
end

function ESP:Add(obj, options)
	if not obj.Parent and not options.RenderInNil then
		return nil
	end

	local box = setmetatable({
		Name = options.Name or obj.Name,
		Type = "Box",
		Color = options.Color,
		Size = options.Size or self.BoxSize,
		Object = obj,
		Player = self:GetPlrFromChar(obj),
		PrimaryPart = options.PrimaryPart or obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart"),
		Components = {},
		IsEnabled = options.IsEnabled,
		RenderInNil = options.RenderInNil
	}, boxBase)

	if self:GetBox(obj) then
		self:GetBox(obj):Remove()
	end

	box.Components["Quad"] = Draw("Quad", {
		Thickness = self.Thickness,
		Color = color,
		Transparency = 1,
		Filled = false,
		Visible = self.Enabled and self.Boxes
	})

	box.Components["Name"] = Draw("Text", {
		Text = box.Name,
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Transparency = 1,
		Visible = self.Enabled and self.Names
	})

	box.Components["Distance"] = Draw("Text", {
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Transparency = 1,
		Visible = self.Enabled and self.Names
	})

	box.Components["Tracer"] = Draw("Line", {
		Thickness = self.Thickness,
		Color = box.Color,
		Transparency = 1,
		Visible = self.Enabled and self.Tracers
	})

	ESP.Objects[obj] = box

	obj.AncestryChanged:Connect(function(_, parent)
		if parent == nil and ESP.AutoRemove ~= false then
			box:Remove()
		end
	end)
	obj:GetPropertyChangedSignal("Parent"):Connect(function()
		if obj.Parent == nil and ESP.AutoRemove ~= false then
			box:Remove()
		end
	end)

	local parent = obj.Parent
	if parent then
		box:Update()
	end

	return box
end

-- Initialize --
RunService.RenderStepped:Connect(function()
	for _, v in pairs(ESP.Objects) do
		if v.Type == "Box" then
			v:Update()
		end
	end
end)

local function CharAdded(char)
    local plr = ESP:GetPlrFromChar(char)
    if plr and (ESP.Players or ESP:IsTeamMate(plr)) then
        ESP:Add(char, {
            Name = plr.DisplayName,
            PrimaryPart = char:WaitForChild("HumanoidRootPart"),
            Color = ESP:GetColor(char),
            IsEnabled = function() return ESP.Players and (ESP.TeamMates or not ESP:IsTeamMate(plr)) end
        })
    end
end

-- Improved Player Character Added Event Handling --
plrs.PlayerAdded:Connect(function(newPlayer)
    newPlayer.CharacterAdded:Connect(CharAdded)
    if newPlayer.Character then
        task.spawn(function()
			CharAdded(newPlayer.Character)
		end)
    end
end)

-- Connect to existing players' characters --
for _, player in ipairs(plrs:GetPlayers()) do
    if player ~= plr then
        player.CharacterAdded:Connect(CharAdded)
        if player.Character then
			task.spawn(function()
				CharAdded(player.Character)
			end)
        end
    end
end

-- Initialize --
RunService.RenderStepped:Connect(function()
	for _, v in pairs(ESP.Objects) do
		if v.Type == "Box" then
			v:Update()
		end
	end
end)

return ESP
